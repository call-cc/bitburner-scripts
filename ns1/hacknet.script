//1% of current funds, per cycle.
var allowancePercentage = 0.01;

var hacknetnodes = [];
for (i = 0; i < hacknet.numNodes(); i++) {
    hacknetnodes.push("hacknet-node-" + i);
}

while (true) {
    for (i = 0; i < hacknetnodes.length; i++) {
        gain = [0, 0, 0];

        currentCash = getServerMoneyAvailable('home');
        currentCash *= allowancePercentage;


        if (hacknet.getPurchaseNodeCost() <= currentCash) {
            hacknet.purchaseNode();
        }

        node = hacknet.getNodeStats(i);

        if (node.level < 200) {
            gain[0] = ((node.level + 1) * 1.6) * Math.pow(1.035, (node.ram - 1)) * ((node.cores + 5) / 6) / hacknet.getLevelUpgradeCost(i, 1);
        } else {
            gain[0] = 0;
        }

        if (node.ram < 64) {
            gain[1] = (node.level * 1.6) * Math.pow(1.035, (node.ram * 2) - 1) * ((node.cores + 5) / 6) / hacknet.getRamUpgradeCost(i);
        } else {
            gain[1] = 0;
        }

        if (node.cores < 16) {
            gain[2] = (node.level * 1.6) * Math.pow(1.035, node.ram - 1) * ((node.cores + 6) / 6) / hacknet.getCoreUpgradeCost(i);
        } else {
            gain[2] = 0;
        }

        // print('Level Upgrade:  ' + gain[0]);
        // print('Ram Upgrade:  ' + gain[1]);
        // print('Core Upgrade:  ' + gain[2]);

        topgain = 0;

        for (j = 0; j < 3; j++) {
            if (gain[j] > topgain) {
                topgain = gain[j];
            }
        }

        topgain = Math.max.apply(this, gain);

        if (topgain === 0) {
            print('All Gains maxed on Node' + i);
            break;
        }

        if (topgain == gain[0] && hacknet.getLevelUpgradeCost(i, 1) < currentCash) {
            print('Upgrading Level on Node' + i);
            hacknet.upgradeLevel(i, 1);
        } else if (topgain == gain[1] && hacknet.getRamUpgradeCost(i, 1) < currentCash) {
            print('Upgrading Ram on Node' + i);
            hacknet.upgradeRam(i);
        } else if (topgain == gain[2] && hacknet.getCoreUpgradeCost(i, 1) < currentCash) {
            print('Upgrading Core on Node' + i);
            hacknet.upgradeCore(i);
        } else {
            print('Cannot afford upgrades on Node' + i);
        }
    }
}
